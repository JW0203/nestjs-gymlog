AWSTemplateFormatVersion: "2010-09-09"
Description: Minimal EC2 instance using default VPC and default subnet

Parameters:
  KeyName:
    Type: String
    Description: Name of an existing EC2 KeyPair to enable SSH access

  InstanceType:
    Type: String
    Default: t2.micro
    AllowedValues:
      - t2.micro
      - t3.micro
      - t3a.micro
    Description: EC2 instance type (free tier eligible)

  VolumeSize:
    Type: Number
    Default: 8
    MinValue: 8
    MaxValue: 30
    Description: Size of EBS volume in GB

  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: Select basic VPC

  Subnet1:
    Type: AWS::EC2::Subnet::Id
    Description: First subnet (must be in ap-northeast-2a)

  Subnet2:
    Type: AWS::EC2::Subnet::Id
    Description: First subnet (must be in ap-northeast-2c)

  DBInstanceIdentifier:
    Description: Enter the name for the DB instance
    Type: String
    AllowedPattern: ^$|^[a-zA-Z]{1}(?:-?[a-zA-Z0-9]){0,62}$
    MinLength: 1
    MaxLength: 63

  DBName:
    Description: Enter the name of database name to creating when DB Instance is created.
    Type: String
    Default: MyDatabase
    MinLength: 1
    MaxLength: 64
    AllowedPattern: "[a-zA-Z][a-zA-Z0-9]*"

  DBUsername:
    Description: Enter DB Instance login ID. Default is admin
    Type: String
    Default: admin
    MinLength: 1
    MaxLength: 16
    AllowedPattern: "[a-zA-Z][a-zA-Z0-9]*"

  DBPassword:
    Description: Enter DB Instance login password
    Type: String
    MinLength: 8
    MaxLength: 41

Resources:
  # IAM Role
  EC2InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: ec2-instance-role
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly # ECR 이미지 pull
        - arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy # CloudWatch 로그 권한

  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref EC2InstanceRole

  # EC2 Instance
  EC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow SSH (22), HTTP (80), and HTTPS (443)
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0

  MyEC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      KeyName: !Ref KeyName
      InstanceType: !Ref InstanceType
      IamInstanceProfile: !Ref EC2InstanceProfile
      ImageId: ami-0d5bb3742db8fc264 # Ubuntu Server 24.04 LTS (서울 리전)
      SecurityGroupIds:
        - !Ref EC2SecurityGroup
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: !Ref VolumeSize
            VolumeType: gp2
            DeleteOnTermination: true
      Tags:
        - Key: Name
          Value: MyEC2Instance

  MyElasticIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  MyEIPAssociation:
    Type: AWS::EC2::EIPAssociation
    Properties:
      InstanceId: !Ref MyEC2Instance
      EIP: !Ref MyElasticIP

  # ALB
  AlbSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow HTTP/HTTPS
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0

  MyTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: my-target-group
      Port: 80
      Protocol: HTTP
      VpcId: !Ref VpcId
      TargetType: instance
      HealthCheckPath: /
      Matcher:
        HttpCode: 200
      Targets:
        - Id: !Ref MyEC2Instance
          Port: 80

  MyALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: my-alb
      Scheme: internet-facing
      Type: application
      IpAddressType: ipv4
      SecurityGroups:
        - !Ref AlbSecurityGroup
      Subnets:
        - !Ref Subnet1
        - !Ref Subnet2

  MyListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref MyALB
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref MyTargetGroup

  # RDS
  RDSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow EC2 to connect to RDS
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          CidrIp: 0.0.0.0/0

  MyDBParameterGroup:
    Type: AWS::RDS::DBParameterGroup
    Properties:
      Description: MySQL 8.0 settings
      Family: mysql8.0
      Parameters:
        character_set_client: utf8mb4
        character_set_connection: utf8mb4
        character_set_database: utf8mb4
        character_set_filesystem: utf8mb4
        character_set_results: utf8mb4
        character_set_server: utf8mb4
        collation_connection: utf8mb4_unicode_ci
        collation_server: utf8mb4_unicode_ci
        time_zone: Asia/Seoul

  MyDBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: Subnet group for RDS
      SubnetIds:
        - !Ref Subnet1
        - !Ref Subnet2

  MyRDSInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      DBInstanceIdentifier: !Ref DBInstanceIdentifier
      DBName: !Ref DBName
      AllocatedStorage: 20
      DBInstanceClass: db.t3.micro
      Engine: mysql
      EngineVersion: 8.0.35
      MasterUsername: !Ref DBUsername
      MasterUserPassword: !Ref DBPassword
      VPCSecurityGroups:
        - !GetAtt RDSSecurityGroup.GroupId
      DBSubnetGroupName: !Ref MyDBSubnetGroup
      PubliclyAccessible: true
      BackupRetentionPeriod: 0
      MultiAZ: false
      DeletionProtection: false
      DBParameterGroupName: !Ref MyDBParameterGroup

  # ECR
  MyECRRepository:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: gymlog-backend
      ImageScanningConfiguration:
        scanOnPush: true
      Tags:
        - Key: Project
          Value: nestjs-gymlog
